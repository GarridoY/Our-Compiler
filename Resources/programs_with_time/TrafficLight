Main {
// element numbers:            0      1        2     3       4        5
    bool[] trafficLight1 = [greenH, yellowH, redH, greenV, yellowV, redV];
    bool[] trafficLight2 = [greenH, yellowH, redH, greenV, yellowV, redV];

    trafficLight2[2]

    //sensors to detecting traffic on roads placed accordingly to the names
    ipin lane1F 0;
    ipin lane1L 1;
    ipin lane2F 2;
    ipin lane2L 3;
    ipin lane3 4;
    ipin lane4 5;
    ipin lane5 6;
    ipin lane6 7;

    int yellowTime = 3;

    //function that gives vertical traffic red, before giving horizontal traffic green
    initiateGreenH(list light){
        clock x = 0;
        light[3] = false;   // turn off greenV
        light[4] = true;    // turn on yellowV

        at (yellowTime){
            light[4] = false;   // turn off yellowV
            light[5] = true;    // turn on redV
            x = 0;
        }
        light[1] = true;    // turn on yellowH
        at (yellowTime){
            light[1] = false;   // turn off yellowH
            light[2] = false;   // turn off redH
            light[0] = true;    // turn on greenH
        }
    }
    //function that gives horizontal traffic red, before giving vertical traffic green
    initiateGreenV(list light){
        x = 0;
        light[0] = false;   // turn off greenH
        light[1] = true;    // turn on yellowH

        at (yellowTime){
            light[1] = false;   //turn off yellowH
            light[2] = true;    //turn on redH
            x = 0;
        }
        x = 0
        light[4] = true;
        at (yellowTime){
            light[4] = false;   // turn off yellowV
            light[5] = false;   // turn off redV
            light[3] = true;    // turn on greenV
        }
    }


-----------------------------------------------------------------------------------------------------------------------
    controllerTrafficLight1(){

        clock x = 0;
        int maxWait = 20;
        bool hFirst;
        bool vFirst;
        bool pending;
        bool hTraffic;
        bool vTraffic;
        bool hFirst;
        bool vFirst;

        //if no traffic or green light switch to green for horizontal traffic (horizontal has green by default)
        if (lane1F || lane2L || lane3 || lane4 || trafficLight1[0] == false){
            initiateGreenH(trafficLight1);
        }
        //checks if horizontal traffic
        if (lane1F || lane2L == true){
           hTraffic = true;
        }
        //checks if vertical traffic
        if (lane3 || lane4){
            vTraffic = true;
        }
        //checks who should get green first
        if (hTraffic == true && vTraffic == false){
            hFirst = true;
        }
        if (hTraffic == false && vTraffic == true){
            vFirst = true;
        }

        //checks if traffic is pending
        if (hFirst == true && vTraffic == true || vFirst == true && hTraffic == true) {
           pending = true;
        }
        else{
            pending = false;
        }

        //limits waiting time if pending, if no traffic from sides green light stays on
        if (hFirst == true){
            initiateGreenH(TrafficLight1);
            if (pending == true){
                x = 0;
                at (waitTime){
                    if (vTraffic){
                        hFirst = false;
                        vFirst = true;
                    }
                }
                else if (hTraffic == false){
                   vFirst = true;
                }
            }
        }

        //limits waiting time if pending, if no traffic before time runs out horizontal traffic should keep having green
        if (vFirst == true){
            initiateGreenV(trafficLight1);
            if (pending == true){
                x = 0;
                at (watTime){
                    if(hFirst){
                        vFirst = false;
                        hFirst = true;
                    }
                }
                else if (vTraffic = false){
                    hFirst = true;
                }
            }
        }
    }
}


ignorer dette â†“
*******************************************************************************************************************************

    trafficLight2[2]
    ipin lane1F 0;

Main {

    bool[] trafficLight1 = [greenH, yellowH, redH, greenV, yellowV, redV];
    bool[] trafficLight2 = [greenH, yellowH, redH, greenV, yellowV, redV];

    //booleans?
    sensor lane1F;
    sensor lane1L;
    sensor lane2F;
    sensor lane2L;
    sensor lane3;
    sensor lane4;
    sensor lane5;
    sensor lane6;

    int yellowTime = 3;

    //function that gives vertical traffic red, before giving horizontal traffic green
    initiateGreenH(list light){
        Time time;
        time.start;
        light.4 = true;

        if (time > yellowTime){
            light.4 = false;
            light.5 = false;
            light.3 = true;
            time.reset
        }
        time.start;
        light.1 = true;
        if (time > yellowTime){
            light.1 = false;
            light.2 = false;
            light.0 = true;
        }
    }
    //function that gives horizontal traffic red, before giving vertical traffic green
    initiateGreenV(list light){
        Time time;
        time.start;
        light.4 = true;

        if (time > yellowTime){
            light.4 = false;
            light.5 = true;
            time.reset
        }
        time.start;
        light.4 = true;
        if (time > yellowTime){
            light.4 = false;
            light.5 = false;
            light.3 = true;
        }
    }


-----------------------------------------------------------------------------------------------------------------------
    controllerTrafficLight1(){

        Time time;
        int maxWait = 20;
        bool hFirst;
        bool vFirst;
        bool pending;
        bool hTraffic;
        bool vTraffic;
        bool hFirst;
        bool vFirst;

        //if no traffic or green light switch to green for horizontal traffic (horizontal has green by default)
        if (lane1F || lane2L || lane3 || lane4 || trafficLight1.0 == false){
            initiateGreenH(trafficLight1);
        }
        //checks if horizontal traffic
        if (lane1F || lane2L == true){
           hTraffic = true;
        }
        //checks if vertical traffic
        if (lane3 || lane4){
            vTraffic = true;
        }
        //checks who should get green first
        if (hTraffic == true && vTraffic == false){
            hFirst = true;
        }
        if (hTraffic == false && vTraffic == true){
            vFirst = true;
        }

        //checks if traffic is pending
        if (hFirst == true && vTraffic == true || vFirst == true && hTraffic == true) {
           pending = true;
        }
        else{
            pending = false;
        }

        //limits waiting time if pending, if no traffic from sides green light stays on
        if (hFirst == true){
            initiateGreenH(TrafficLight1);
            if (pending == true){
                time.start;
                if (waitTime < time && vTraffic){
                    hFirst = false;
                    vFirst = true;
                    time.reset;
                }
                else if (hTraffic == false){
                   vFirst = true;
                }
            }
        }

        //limits waiting time if pending, if no traffic before time runs out horizontal traffic should keep having green
        if (vFirst == true){
            initiateGreenV(trafficLight1);
            if (pending == true){
                time.start;
                if (waitTime < time && hFirst){
                    vFirst = false;
                    hFirst = true;
                   time.reset;
                }
                else if (vTraffic = false){
                    hFirst = true;
                }
            }
        }
    }
}
